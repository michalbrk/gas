{"version":3,"sources":["createElement.js","render.js","mount.js","diff.js","main.js"],"names":["tagName","attrs","children","vElem","Object","create","assign","renderEl","$el","document","createElement","entries","k","v","setAttribute","child","appendChild","render","vNode","createTextNode","$node","$target","replaceWith","diff","oldVTree","newVTree","remove","undefined","$newNode","createVApp","count","id","dataCount","String","src","vApp","$app","$rootEl","getElementById","setInterval","vNewApp","patch"],"mappings":"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","file":"main.1f19ae8e.map","sourceRoot":"..\\src","sourcesContent":["//a function returning a virtual element\r\n//a default values for opts as elements might\r\n//be created without options\r\nexport default (tagName, { attrs = {}, children =[] } = {}) => {\r\n\r\n    //A trully plain object that doesn't inherit\r\n    //from Object but from null instead\r\n    const vElem = Object.create(null)\r\n\r\n    Object.assign(vElem, {\r\n        tagName,\r\n        attrs,\r\n        children\r\n    })\r\n    \r\n    return vElem\r\n}\r\n","const renderEl = ({ tagName, attrs, children}) => {\r\n    const $el = document.createElement(tagName)\r\n\r\n    //Add all the attributes\r\n    for(const [k, v] of Object.entries(attrs)) {\r\n        $el.setAttribute(k, v)\r\n    }\r\n\r\n    //Append all the children\r\n    for(const child of children) {\r\n        $el.appendChild(render(child))\r\n    }\r\n\r\n    return $el\r\n}\r\n\r\nconst render = vNode => {\r\n    if(typeof vNode === 'string') {\r\n        return document.createTextNode(vNode)\r\n    }\r\n\r\n    //Everything else is a virtual element\r\n    return renderEl(vNode)\r\n}\r\n\r\nexport default render","export default ($node, $target) => {\r\n\r\n    //Replacing empty div element with the\r\n    //$app one\r\n    $target.replaceWith($node)\r\n    return $node\r\n}","import render from './render'\r\n\r\nconst diff = (oldVTree, newVTree) => {\r\n\r\n    if(newVTree === 'undefined') {\r\n        return $node => {\r\n\r\n            //Patch should return a new root node\r\n            $node.remove()\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    if(typeof oldVTree === 'string' || typeof newVTree === 'string') {\r\n        if(oldVTree !== newVTree) {\r\n\r\n            //1. Both trees are strings and have different values\r\n            //2. One of them is text node and 2nd the element node\r\n            return $node => {\r\n                const $newNode = render(newVTree)\r\n                $node.replaceWith($newNode)\r\n                return $newNode\r\n            }\r\n        } else {\r\n            return $node => $node\r\n        }\r\n    }\r\n\r\n    if(oldVTree.tagName !== newVTree.tagName) {\r\n\r\n        //When tottaly different render the new tree\r\n        //and mount it\r\n        return $node => {\r\n            const $newNode = render(newVTree)\r\n            $node.replaceWith($newNode)\r\n            return $newNode\r\n        }\r\n    }\r\n}\r\n\r\nexport default diff","import createElement from './createElement'\r\nimport render from './render'\r\nimport mount from './mount'\r\nimport diff from './diff'\r\n\r\nconst createVApp = count => createElement('div', {\r\n    attrs: {\r\n        id: 'app',\r\n        dataCount: count\r\n    },\r\n    children: [\r\n        'The current count is: ',\r\n        String(count),\r\n        createElement('img', {\r\n            attrs: {\r\n                src: 'https://media.giphy.com/media/ECSalSdhUhRcI/giphy.gif'\r\n            }\r\n        })\r\n    ]\r\n})\r\n\r\nlet count = 0\r\nconst vApp = createVApp(count)\r\nconst $app = render(vApp)\r\n\r\n//Mount $app to the empty div\r\nlet $rootEl = mount($app, document.getElementById('app'))\r\n\r\nsetInterval(() => {\r\n    count++\r\n    const vNewApp = createVApp(count)\r\n    const patch = diff(vApp, vNewApp)\r\n\r\n    //Patch will return the new $rootEl in case\r\n    //the whole $rootEl will be replaced\r\n    $rootEl = patch($rootEl)\r\n\r\n    vApp = vNewApp\r\n}, 1000)"]}