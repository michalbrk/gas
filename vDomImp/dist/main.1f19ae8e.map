{"version":3,"sources":["JS/createElement.js","JS/render.js","JS/mount.js","JS/diff.js","main.js"],"names":["tagName","attrs","children","vElem","Object","create","assign","renderEl","$el","document","createElement","entries","k","v","setAttribute","child","appendChild","render","vNode","createTextNode","$node","$target","replaceWith","zip","xs","ys","zipped","i","Math","min","length","push","diffChildren","oldVChildren","newVChildren","childPatches","forEach","oldVChild","diff","additionalPatches","additionalVChild","slice","$parent","childNodes","patch","$child","diffAttrs","oldAttrs","newAttrs","patches","removeAttribute","oldVTree","newVTree","undefined","remove","$newNode","patchAttrs","patchChildren","createVApp","count","id","dataCount","String","Array","from","src","vApp","$app","$rootEl","getElementById","setInterval","n","floor","random","vNewApp"],"mappings":"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","file":"main.1f19ae8e.map","sourceRoot":"..\\src","sourcesContent":["//a function returning a virtual element\r\n//a default values for opts as elements might\r\n//be created without options\r\nexport default (tagName, { attrs = {}, children =[] } = {}) => {\r\n\r\n    //A trully plain object that doesn't inherit\r\n    //from Object but from null instead\r\n    const vElem = Object.create(null)\r\n\r\n    Object.assign(vElem, {\r\n        tagName,\r\n        attrs,\r\n        children\r\n    })\r\n    \r\n    return vElem\r\n}\r\n","const renderEl = ({ tagName, attrs, children}) => {\r\n    const $el = document.createElement(tagName)\r\n\r\n    //Add all the attributes\r\n    for(const [k, v] of Object.entries(attrs)) {\r\n        $el.setAttribute(k, v)\r\n    }\r\n\r\n    //Append all the children\r\n    for(const child of children) {\r\n        $el.appendChild(render(child))\r\n    }\r\n\r\n    return $el\r\n}\r\n\r\nconst render = vNode => {\r\n    if(typeof vNode === 'string') {\r\n        return document.createTextNode(vNode)\r\n    }\r\n\r\n    //Everything else is a virtual element\r\n    return renderEl(vNode)\r\n}\r\n\r\nexport default render","export default ($node, $target) => {\r\n\r\n    //Replacing empty div element with the\r\n    //$app one\r\n    $target.replaceWith($node)\r\n    return $node\r\n}","import render from './render';\r\n\r\nconst zip = (xs, ys) => {\r\n  const zipped = [];\r\n  for (let i = 0; i < Math.min(xs.length, ys.length); i++) {\r\n    zipped.push([xs[i], ys[i]]);\r\n  }\r\n  return zipped;\r\n};\r\n\r\nconst diffChildren = (oldVChildren, newVChildren) => {\r\n  const childPatches = [];\r\n  oldVChildren.forEach((oldVChild, i) => {\r\n    childPatches.push(diff(oldVChild, newVChildren[i]));\r\n  });\r\n\r\n  const additionalPatches = [];\r\n  for (const additionalVChild of newVChildren.slice(oldVChildren.length)) {\r\n    additionalPatches.push($node => {\r\n      $node.appendChild(render(additionalVChild));\r\n      return $node;\r\n    });\r\n  }\r\n\r\n  return $parent => {\r\n    // since childPatches are expecting the $child, not $parent,\r\n    // we cannot just loop through them and call patch($parent)\r\n    for (const [patch, $child] of zip(childPatches, $parent.childNodes)) {\r\n      patch($child);\r\n    }\r\n\r\n    for (const patch of additionalPatches) {\r\n      patch($parent);\r\n    }\r\n    return $parent;\r\n  };\r\n};\r\n\r\nconst diffAttrs = (oldAttrs, newAttrs) => {\r\n  const patches = [];\r\n\r\n  // setting newAttrs\r\n  for (const [k, v] of Object.entries(newAttrs)) {\r\n    patches.push($node => {\r\n      $node.setAttribute(k, v);\r\n      return $node;\r\n    });\r\n  }\r\n\r\n  // removing attrs\r\n  for (const k in oldAttrs) {\r\n    if (!(k in newAttrs)) {\r\n      patches.push($node => {\r\n        $node.removeAttribute(k);\r\n        return $node;\r\n      });\r\n    }\r\n  }\r\n\r\n  return $node => {\r\n    for (const patch of patches) {\r\n      patch($node);\r\n    }\r\n    return $node;\r\n  };\r\n};\r\n\r\nconst diff = (oldVTree, newVTree) => {\r\n  // let's assume oldVTree is not undefined!\r\n  if (newVTree === undefined) {\r\n    return $node => {\r\n      $node.remove();\r\n      // the patch should return the new root node.\r\n      // since there is none in this case,\r\n      // we will just return undefined.\r\n      return undefined;\r\n    };\r\n  }\r\n\r\n  if (typeof oldVTree === 'string' || typeof newVTree === 'string') {\r\n    if (oldVTree !== newVTree) {\r\n      // could be 2 cases:\r\n      // 1. both trees are string and they have different values\r\n      // 2. one of the trees is text node and\r\n      //    the other one is elem node\r\n      // Either case, we will just render(newVTree)!\r\n      return $node => {\r\n        const $newNode = render(newVTree);\r\n        $node.replaceWith($newNode);\r\n        return $newNode;\r\n      };\r\n    } else {\r\n      // this means that both trees are string\r\n      // and they have the same values\r\n      return $node => $node;\r\n    }\r\n  }\r\n\r\n  if (oldVTree.tagName !== newVTree.tagName) {\r\n    // we assume that they are totally different and\r\n    // will not attempt to find the differences.\r\n    // simply render the newVTree and mount it.\r\n    return $node => {\r\n      const $newNode = render(newVTree);\r\n      $node.replaceWith($newNode);\r\n      return $newNode;\r\n    };\r\n  }\r\n\r\n  const patchAttrs = diffAttrs(oldVTree.attrs, newVTree.attrs);\r\n  const patchChildren = diffChildren(oldVTree.children, newVTree.children);\r\n\r\n  return $node => {\r\n    patchAttrs($node);\r\n    patchChildren($node);\r\n    return $node;\r\n  };\r\n};\r\n\r\nexport default diff;\r\n","import createElement from './JS/createElement'\r\nimport render from './JS/render'\r\nimport mount from './JS/mount'\r\nimport diff from './JS/diff'\r\n\r\nconst createVApp = count => createElement('div', {\r\n    attrs: {\r\n        id: 'app',\r\n        dataCount: count\r\n    },\r\n    children: [\r\n        'The current count is: ',\r\n        String(count),\r\n        ...Array.from({ length: count }, () => createElement('img', {\r\n            attrs: {\r\n                src: 'https://media.giphy.com/media/ECSalSdhUhRcI/giphy.gif'\r\n            }\r\n        }))\r\n    ]\r\n})\r\n\r\nconst vApp = createVApp(0)\r\nconst $app = render(vApp)\r\n\r\n//Mount $app to the empty div\r\nlet $rootEl = mount($app, document.getElementById('app'))\r\n\r\nsetInterval(() => {\r\n    const n = Math.floor(Math.random() * 10)\r\n    const vNewApp = createVApp(n)\r\n    const patch = diff(vApp, vNewApp)\r\n\r\n    //Patch will return the new $rootEl in case\r\n    //the whole $rootEl will be replaced\r\n    $rootEl = patch($rootEl)\r\n\r\n    vApp = vNewApp\r\n}, 1000)\r\n"]}